//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.18052
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 5.0.61118.0
// 
namespace SilverlightTest.Services.EmployeesService {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Employee", Namespace="http://schemas.datacontract.org/2004/07/SilverlightTest.Web.EmployeeInfo")]
    public partial class Employee : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.DateTime BirthdayField;
        
        private System.Nullable<double> BonusField;
        
        private int DepartmentIdField;
        
        private string DepartmentNameField;
        
        private int IdField;
        
        private int LevelField;
        
        private string NameField;
        
        private string RemarkField;
        
        private double SalaryField;
        
        private bool SexField;
        
        private System.Collections.ObjectModel.ObservableCollection<SilverlightTest.Services.EmployeesService.Skill> SkillsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Birthday {
            get {
                return this.BirthdayField;
            }
            set {
                if ((this.BirthdayField.Equals(value) != true)) {
                    this.BirthdayField = value;
                    this.RaisePropertyChanged("Birthday");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> Bonus {
            get {
                return this.BonusField;
            }
            set {
                if ((this.BonusField.Equals(value) != true)) {
                    this.BonusField = value;
                    this.RaisePropertyChanged("Bonus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DepartmentId {
            get {
                return this.DepartmentIdField;
            }
            set {
                if ((this.DepartmentIdField.Equals(value) != true)) {
                    this.DepartmentIdField = value;
                    this.RaisePropertyChanged("DepartmentId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DepartmentName {
            get {
                return this.DepartmentNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DepartmentNameField, value) != true)) {
                    this.DepartmentNameField = value;
                    this.RaisePropertyChanged("DepartmentName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Level {
            get {
                return this.LevelField;
            }
            set {
                if ((this.LevelField.Equals(value) != true)) {
                    this.LevelField = value;
                    this.RaisePropertyChanged("Level");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Remark {
            get {
                return this.RemarkField;
            }
            set {
                if ((object.ReferenceEquals(this.RemarkField, value) != true)) {
                    this.RemarkField = value;
                    this.RaisePropertyChanged("Remark");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Salary {
            get {
                return this.SalaryField;
            }
            set {
                if ((this.SalaryField.Equals(value) != true)) {
                    this.SalaryField = value;
                    this.RaisePropertyChanged("Salary");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Sex {
            get {
                return this.SexField;
            }
            set {
                if ((this.SexField.Equals(value) != true)) {
                    this.SexField = value;
                    this.RaisePropertyChanged("Sex");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<SilverlightTest.Services.EmployeesService.Skill> Skills {
            get {
                return this.SkillsField;
            }
            set {
                if ((object.ReferenceEquals(this.SkillsField, value) != true)) {
                    this.SkillsField = value;
                    this.RaisePropertyChanged("Skills");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Skill", Namespace="http://schemas.datacontract.org/2004/07/SilverlightTest.Web.EmployeeInfo")]
    public partial class Skill : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int IdField;
        
        private string InfoField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Info {
            get {
                return this.InfoField;
            }
            set {
                if ((object.ReferenceEquals(this.InfoField, value) != true)) {
                    this.InfoField = value;
                    this.RaisePropertyChanged("Info");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Department", Namespace="http://schemas.datacontract.org/2004/07/SilverlightTest.Web.EmployeeInfo")]
    public partial class Department : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int IdField;
        
        private string NameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="EmployeesService.IEmployeesService")]
    public interface IEmployeesService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IEmployeesService/DoWork", ReplyAction="http://tempuri.org/IEmployeesService/DoWorkResponse")]
        System.IAsyncResult BeginDoWork(System.AsyncCallback callback, object asyncState);
        
        void EndDoWork(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IEmployeesService/GetEmployeesList", ReplyAction="http://tempuri.org/IEmployeesService/GetEmployeesListResponse")]
        System.IAsyncResult BeginGetEmployeesList(System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<SilverlightTest.Services.EmployeesService.Employee> EndGetEmployeesList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IEmployeesService/GetDepartmentList", ReplyAction="http://tempuri.org/IEmployeesService/GetDepartmentListResponse")]
        System.IAsyncResult BeginGetDepartmentList(System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<SilverlightTest.Services.EmployeesService.Department> EndGetDepartmentList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IEmployeesService/GetSkillList", ReplyAction="http://tempuri.org/IEmployeesService/GetSkillListResponse")]
        System.IAsyncResult BeginGetSkillList(System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<SilverlightTest.Services.EmployeesService.Skill> EndGetSkillList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IEmployeesService/AddEmployee", ReplyAction="http://tempuri.org/IEmployeesService/AddEmployeeResponse")]
        System.IAsyncResult BeginAddEmployee(SilverlightTest.Services.EmployeesService.Employee emp, System.AsyncCallback callback, object asyncState);
        
        bool EndAddEmployee(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IEmployeesService/DeleteEmployees", ReplyAction="http://tempuri.org/IEmployeesService/DeleteEmployeesResponse")]
        System.IAsyncResult BeginDeleteEmployees(System.Collections.ObjectModel.ObservableCollection<int> empsId, System.AsyncCallback callback, object asyncState);
        
        bool EndDeleteEmployees(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IEmployeesService/ModifyEmployees", ReplyAction="http://tempuri.org/IEmployeesService/ModifyEmployeesResponse")]
        System.IAsyncResult BeginModifyEmployees(SilverlightTest.Services.EmployeesService.Employee emp, System.AsyncCallback callback, object asyncState);
        
        bool EndModifyEmployees(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IEmployeesServiceChannel : SilverlightTest.Services.EmployeesService.IEmployeesService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetEmployeesListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetEmployeesListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<SilverlightTest.Services.EmployeesService.Employee> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<SilverlightTest.Services.EmployeesService.Employee>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetDepartmentListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetDepartmentListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<SilverlightTest.Services.EmployeesService.Department> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<SilverlightTest.Services.EmployeesService.Department>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetSkillListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetSkillListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<SilverlightTest.Services.EmployeesService.Skill> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<SilverlightTest.Services.EmployeesService.Skill>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddEmployeeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddEmployeeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeleteEmployeesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeleteEmployeesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ModifyEmployeesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ModifyEmployeesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EmployeesServiceClient : System.ServiceModel.ClientBase<SilverlightTest.Services.EmployeesService.IEmployeesService>, SilverlightTest.Services.EmployeesService.IEmployeesService {
        
        private BeginOperationDelegate onBeginDoWorkDelegate;
        
        private EndOperationDelegate onEndDoWorkDelegate;
        
        private System.Threading.SendOrPostCallback onDoWorkCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetEmployeesListDelegate;
        
        private EndOperationDelegate onEndGetEmployeesListDelegate;
        
        private System.Threading.SendOrPostCallback onGetEmployeesListCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetDepartmentListDelegate;
        
        private EndOperationDelegate onEndGetDepartmentListDelegate;
        
        private System.Threading.SendOrPostCallback onGetDepartmentListCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetSkillListDelegate;
        
        private EndOperationDelegate onEndGetSkillListDelegate;
        
        private System.Threading.SendOrPostCallback onGetSkillListCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddEmployeeDelegate;
        
        private EndOperationDelegate onEndAddEmployeeDelegate;
        
        private System.Threading.SendOrPostCallback onAddEmployeeCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteEmployeesDelegate;
        
        private EndOperationDelegate onEndDeleteEmployeesDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteEmployeesCompletedDelegate;
        
        private BeginOperationDelegate onBeginModifyEmployeesDelegate;
        
        private EndOperationDelegate onEndModifyEmployeesDelegate;
        
        private System.Threading.SendOrPostCallback onModifyEmployeesCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public EmployeesServiceClient() {
        }
        
        public EmployeesServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public EmployeesServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EmployeesServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EmployeesServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("无法设置 CookieContainer。请确保绑定包含 HttpCookieContainerBindingElement。");
                }
            }
        }
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DoWorkCompleted;
        
        public event System.EventHandler<GetEmployeesListCompletedEventArgs> GetEmployeesListCompleted;
        
        public event System.EventHandler<GetDepartmentListCompletedEventArgs> GetDepartmentListCompleted;
        
        public event System.EventHandler<GetSkillListCompletedEventArgs> GetSkillListCompleted;
        
        public event System.EventHandler<AddEmployeeCompletedEventArgs> AddEmployeeCompleted;
        
        public event System.EventHandler<DeleteEmployeesCompletedEventArgs> DeleteEmployeesCompleted;
        
        public event System.EventHandler<ModifyEmployeesCompletedEventArgs> ModifyEmployeesCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightTest.Services.EmployeesService.IEmployeesService.BeginDoWork(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDoWork(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void SilverlightTest.Services.EmployeesService.IEmployeesService.EndDoWork(System.IAsyncResult result) {
            base.Channel.EndDoWork(result);
        }
        
        private System.IAsyncResult OnBeginDoWork(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((SilverlightTest.Services.EmployeesService.IEmployeesService)(this)).BeginDoWork(callback, asyncState);
        }
        
        private object[] OnEndDoWork(System.IAsyncResult result) {
            ((SilverlightTest.Services.EmployeesService.IEmployeesService)(this)).EndDoWork(result);
            return null;
        }
        
        private void OnDoWorkCompleted(object state) {
            if ((this.DoWorkCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DoWorkCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DoWorkAsync() {
            this.DoWorkAsync(null);
        }
        
        public void DoWorkAsync(object userState) {
            if ((this.onBeginDoWorkDelegate == null)) {
                this.onBeginDoWorkDelegate = new BeginOperationDelegate(this.OnBeginDoWork);
            }
            if ((this.onEndDoWorkDelegate == null)) {
                this.onEndDoWorkDelegate = new EndOperationDelegate(this.OnEndDoWork);
            }
            if ((this.onDoWorkCompletedDelegate == null)) {
                this.onDoWorkCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDoWorkCompleted);
            }
            base.InvokeAsync(this.onBeginDoWorkDelegate, null, this.onEndDoWorkDelegate, this.onDoWorkCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightTest.Services.EmployeesService.IEmployeesService.BeginGetEmployeesList(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetEmployeesList(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<SilverlightTest.Services.EmployeesService.Employee> SilverlightTest.Services.EmployeesService.IEmployeesService.EndGetEmployeesList(System.IAsyncResult result) {
            return base.Channel.EndGetEmployeesList(result);
        }
        
        private System.IAsyncResult OnBeginGetEmployeesList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((SilverlightTest.Services.EmployeesService.IEmployeesService)(this)).BeginGetEmployeesList(callback, asyncState);
        }
        
        private object[] OnEndGetEmployeesList(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<SilverlightTest.Services.EmployeesService.Employee> retVal = ((SilverlightTest.Services.EmployeesService.IEmployeesService)(this)).EndGetEmployeesList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetEmployeesListCompleted(object state) {
            if ((this.GetEmployeesListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetEmployeesListCompleted(this, new GetEmployeesListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetEmployeesListAsync() {
            this.GetEmployeesListAsync(null);
        }
        
        public void GetEmployeesListAsync(object userState) {
            if ((this.onBeginGetEmployeesListDelegate == null)) {
                this.onBeginGetEmployeesListDelegate = new BeginOperationDelegate(this.OnBeginGetEmployeesList);
            }
            if ((this.onEndGetEmployeesListDelegate == null)) {
                this.onEndGetEmployeesListDelegate = new EndOperationDelegate(this.OnEndGetEmployeesList);
            }
            if ((this.onGetEmployeesListCompletedDelegate == null)) {
                this.onGetEmployeesListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetEmployeesListCompleted);
            }
            base.InvokeAsync(this.onBeginGetEmployeesListDelegate, null, this.onEndGetEmployeesListDelegate, this.onGetEmployeesListCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightTest.Services.EmployeesService.IEmployeesService.BeginGetDepartmentList(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetDepartmentList(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<SilverlightTest.Services.EmployeesService.Department> SilverlightTest.Services.EmployeesService.IEmployeesService.EndGetDepartmentList(System.IAsyncResult result) {
            return base.Channel.EndGetDepartmentList(result);
        }
        
        private System.IAsyncResult OnBeginGetDepartmentList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((SilverlightTest.Services.EmployeesService.IEmployeesService)(this)).BeginGetDepartmentList(callback, asyncState);
        }
        
        private object[] OnEndGetDepartmentList(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<SilverlightTest.Services.EmployeesService.Department> retVal = ((SilverlightTest.Services.EmployeesService.IEmployeesService)(this)).EndGetDepartmentList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDepartmentListCompleted(object state) {
            if ((this.GetDepartmentListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDepartmentListCompleted(this, new GetDepartmentListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDepartmentListAsync() {
            this.GetDepartmentListAsync(null);
        }
        
        public void GetDepartmentListAsync(object userState) {
            if ((this.onBeginGetDepartmentListDelegate == null)) {
                this.onBeginGetDepartmentListDelegate = new BeginOperationDelegate(this.OnBeginGetDepartmentList);
            }
            if ((this.onEndGetDepartmentListDelegate == null)) {
                this.onEndGetDepartmentListDelegate = new EndOperationDelegate(this.OnEndGetDepartmentList);
            }
            if ((this.onGetDepartmentListCompletedDelegate == null)) {
                this.onGetDepartmentListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDepartmentListCompleted);
            }
            base.InvokeAsync(this.onBeginGetDepartmentListDelegate, null, this.onEndGetDepartmentListDelegate, this.onGetDepartmentListCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightTest.Services.EmployeesService.IEmployeesService.BeginGetSkillList(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetSkillList(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<SilverlightTest.Services.EmployeesService.Skill> SilverlightTest.Services.EmployeesService.IEmployeesService.EndGetSkillList(System.IAsyncResult result) {
            return base.Channel.EndGetSkillList(result);
        }
        
        private System.IAsyncResult OnBeginGetSkillList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((SilverlightTest.Services.EmployeesService.IEmployeesService)(this)).BeginGetSkillList(callback, asyncState);
        }
        
        private object[] OnEndGetSkillList(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<SilverlightTest.Services.EmployeesService.Skill> retVal = ((SilverlightTest.Services.EmployeesService.IEmployeesService)(this)).EndGetSkillList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetSkillListCompleted(object state) {
            if ((this.GetSkillListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetSkillListCompleted(this, new GetSkillListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetSkillListAsync() {
            this.GetSkillListAsync(null);
        }
        
        public void GetSkillListAsync(object userState) {
            if ((this.onBeginGetSkillListDelegate == null)) {
                this.onBeginGetSkillListDelegate = new BeginOperationDelegate(this.OnBeginGetSkillList);
            }
            if ((this.onEndGetSkillListDelegate == null)) {
                this.onEndGetSkillListDelegate = new EndOperationDelegate(this.OnEndGetSkillList);
            }
            if ((this.onGetSkillListCompletedDelegate == null)) {
                this.onGetSkillListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetSkillListCompleted);
            }
            base.InvokeAsync(this.onBeginGetSkillListDelegate, null, this.onEndGetSkillListDelegate, this.onGetSkillListCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightTest.Services.EmployeesService.IEmployeesService.BeginAddEmployee(SilverlightTest.Services.EmployeesService.Employee emp, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddEmployee(emp, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool SilverlightTest.Services.EmployeesService.IEmployeesService.EndAddEmployee(System.IAsyncResult result) {
            return base.Channel.EndAddEmployee(result);
        }
        
        private System.IAsyncResult OnBeginAddEmployee(object[] inValues, System.AsyncCallback callback, object asyncState) {
            SilverlightTest.Services.EmployeesService.Employee emp = ((SilverlightTest.Services.EmployeesService.Employee)(inValues[0]));
            return ((SilverlightTest.Services.EmployeesService.IEmployeesService)(this)).BeginAddEmployee(emp, callback, asyncState);
        }
        
        private object[] OnEndAddEmployee(System.IAsyncResult result) {
            bool retVal = ((SilverlightTest.Services.EmployeesService.IEmployeesService)(this)).EndAddEmployee(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddEmployeeCompleted(object state) {
            if ((this.AddEmployeeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddEmployeeCompleted(this, new AddEmployeeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddEmployeeAsync(SilverlightTest.Services.EmployeesService.Employee emp) {
            this.AddEmployeeAsync(emp, null);
        }
        
        public void AddEmployeeAsync(SilverlightTest.Services.EmployeesService.Employee emp, object userState) {
            if ((this.onBeginAddEmployeeDelegate == null)) {
                this.onBeginAddEmployeeDelegate = new BeginOperationDelegate(this.OnBeginAddEmployee);
            }
            if ((this.onEndAddEmployeeDelegate == null)) {
                this.onEndAddEmployeeDelegate = new EndOperationDelegate(this.OnEndAddEmployee);
            }
            if ((this.onAddEmployeeCompletedDelegate == null)) {
                this.onAddEmployeeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddEmployeeCompleted);
            }
            base.InvokeAsync(this.onBeginAddEmployeeDelegate, new object[] {
                        emp}, this.onEndAddEmployeeDelegate, this.onAddEmployeeCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightTest.Services.EmployeesService.IEmployeesService.BeginDeleteEmployees(System.Collections.ObjectModel.ObservableCollection<int> empsId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteEmployees(empsId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool SilverlightTest.Services.EmployeesService.IEmployeesService.EndDeleteEmployees(System.IAsyncResult result) {
            return base.Channel.EndDeleteEmployees(result);
        }
        
        private System.IAsyncResult OnBeginDeleteEmployees(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Collections.ObjectModel.ObservableCollection<int> empsId = ((System.Collections.ObjectModel.ObservableCollection<int>)(inValues[0]));
            return ((SilverlightTest.Services.EmployeesService.IEmployeesService)(this)).BeginDeleteEmployees(empsId, callback, asyncState);
        }
        
        private object[] OnEndDeleteEmployees(System.IAsyncResult result) {
            bool retVal = ((SilverlightTest.Services.EmployeesService.IEmployeesService)(this)).EndDeleteEmployees(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDeleteEmployeesCompleted(object state) {
            if ((this.DeleteEmployeesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteEmployeesCompleted(this, new DeleteEmployeesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteEmployeesAsync(System.Collections.ObjectModel.ObservableCollection<int> empsId) {
            this.DeleteEmployeesAsync(empsId, null);
        }
        
        public void DeleteEmployeesAsync(System.Collections.ObjectModel.ObservableCollection<int> empsId, object userState) {
            if ((this.onBeginDeleteEmployeesDelegate == null)) {
                this.onBeginDeleteEmployeesDelegate = new BeginOperationDelegate(this.OnBeginDeleteEmployees);
            }
            if ((this.onEndDeleteEmployeesDelegate == null)) {
                this.onEndDeleteEmployeesDelegate = new EndOperationDelegate(this.OnEndDeleteEmployees);
            }
            if ((this.onDeleteEmployeesCompletedDelegate == null)) {
                this.onDeleteEmployeesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteEmployeesCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteEmployeesDelegate, new object[] {
                        empsId}, this.onEndDeleteEmployeesDelegate, this.onDeleteEmployeesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightTest.Services.EmployeesService.IEmployeesService.BeginModifyEmployees(SilverlightTest.Services.EmployeesService.Employee emp, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginModifyEmployees(emp, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool SilverlightTest.Services.EmployeesService.IEmployeesService.EndModifyEmployees(System.IAsyncResult result) {
            return base.Channel.EndModifyEmployees(result);
        }
        
        private System.IAsyncResult OnBeginModifyEmployees(object[] inValues, System.AsyncCallback callback, object asyncState) {
            SilverlightTest.Services.EmployeesService.Employee emp = ((SilverlightTest.Services.EmployeesService.Employee)(inValues[0]));
            return ((SilverlightTest.Services.EmployeesService.IEmployeesService)(this)).BeginModifyEmployees(emp, callback, asyncState);
        }
        
        private object[] OnEndModifyEmployees(System.IAsyncResult result) {
            bool retVal = ((SilverlightTest.Services.EmployeesService.IEmployeesService)(this)).EndModifyEmployees(result);
            return new object[] {
                    retVal};
        }
        
        private void OnModifyEmployeesCompleted(object state) {
            if ((this.ModifyEmployeesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ModifyEmployeesCompleted(this, new ModifyEmployeesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ModifyEmployeesAsync(SilverlightTest.Services.EmployeesService.Employee emp) {
            this.ModifyEmployeesAsync(emp, null);
        }
        
        public void ModifyEmployeesAsync(SilverlightTest.Services.EmployeesService.Employee emp, object userState) {
            if ((this.onBeginModifyEmployeesDelegate == null)) {
                this.onBeginModifyEmployeesDelegate = new BeginOperationDelegate(this.OnBeginModifyEmployees);
            }
            if ((this.onEndModifyEmployeesDelegate == null)) {
                this.onEndModifyEmployeesDelegate = new EndOperationDelegate(this.OnEndModifyEmployees);
            }
            if ((this.onModifyEmployeesCompletedDelegate == null)) {
                this.onModifyEmployeesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnModifyEmployeesCompleted);
            }
            base.InvokeAsync(this.onBeginModifyEmployeesDelegate, new object[] {
                        emp}, this.onEndModifyEmployeesDelegate, this.onModifyEmployeesCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override SilverlightTest.Services.EmployeesService.IEmployeesService CreateChannel() {
            return new EmployeesServiceClientChannel(this);
        }
        
        private class EmployeesServiceClientChannel : ChannelBase<SilverlightTest.Services.EmployeesService.IEmployeesService>, SilverlightTest.Services.EmployeesService.IEmployeesService {
            
            public EmployeesServiceClientChannel(System.ServiceModel.ClientBase<SilverlightTest.Services.EmployeesService.IEmployeesService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginDoWork(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("DoWork", _args, callback, asyncState);
                return _result;
            }
            
            public void EndDoWork(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("DoWork", _args, result);
            }
            
            public System.IAsyncResult BeginGetEmployeesList(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetEmployeesList", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<SilverlightTest.Services.EmployeesService.Employee> EndGetEmployeesList(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<SilverlightTest.Services.EmployeesService.Employee> _result = ((System.Collections.ObjectModel.ObservableCollection<SilverlightTest.Services.EmployeesService.Employee>)(base.EndInvoke("GetEmployeesList", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetDepartmentList(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetDepartmentList", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<SilverlightTest.Services.EmployeesService.Department> EndGetDepartmentList(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<SilverlightTest.Services.EmployeesService.Department> _result = ((System.Collections.ObjectModel.ObservableCollection<SilverlightTest.Services.EmployeesService.Department>)(base.EndInvoke("GetDepartmentList", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetSkillList(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetSkillList", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<SilverlightTest.Services.EmployeesService.Skill> EndGetSkillList(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<SilverlightTest.Services.EmployeesService.Skill> _result = ((System.Collections.ObjectModel.ObservableCollection<SilverlightTest.Services.EmployeesService.Skill>)(base.EndInvoke("GetSkillList", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAddEmployee(SilverlightTest.Services.EmployeesService.Employee emp, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = emp;
                System.IAsyncResult _result = base.BeginInvoke("AddEmployee", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndAddEmployee(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("AddEmployee", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeleteEmployees(System.Collections.ObjectModel.ObservableCollection<int> empsId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = empsId;
                System.IAsyncResult _result = base.BeginInvoke("DeleteEmployees", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndDeleteEmployees(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("DeleteEmployees", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginModifyEmployees(SilverlightTest.Services.EmployeesService.Employee emp, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = emp;
                System.IAsyncResult _result = base.BeginInvoke("ModifyEmployees", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndModifyEmployees(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("ModifyEmployees", _args, result)));
                return _result;
            }
        }
    }
}
